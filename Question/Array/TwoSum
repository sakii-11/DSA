unordered map + do it one loop otherwise you have to look for edge cases
O(n)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> m;
        int n= nums.size();
        for(int i=0; i<n; i++){
            int k= target - nums[i];
            if(m.find(k) != m.end()) return {m[k],i};
            else m[nums[i]]=i;
        }
        return {};
    }
};